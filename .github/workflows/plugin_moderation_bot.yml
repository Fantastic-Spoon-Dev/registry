name: Koishi Plugin - Approve Request

on:
  issue_comment:
    types: [created] # 仅当评论创建时触发

jobs:
  approve_and_add_plugin:
    runs-on: ubuntu-latest
    permissions:
      contents: read # 读取 issue body
      issues: write  # 用于后续可选的添加评论，虽然当前未启用
      pull-requests: write # for comment cleanup/reactions (optional)

    # 检查评论是否包含 /approve-plugin 命令，并且评论者是仓库成员或贡献者
    if: |
      contains(github.event.comment.body, '/approve-plugin') &&
      (github.event.comment.author_association == 'MEMBER' || github.event.comment.author_association == 'CONTRIBUTOR' || github.event.comment.author_association == 'OWNER')
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Parse Command Arguments from Comment
        id: parse_command
        uses: actions/github-script@v6
        with:
          script: |
            const commentBody = process.env.COMMENT_BODY;
            const core = require('@actions/core');

            let rating = null;
            let verified = false; // 默认值为 false
            let category = null;  // 默认为 null，将从 Issue 获取或被覆盖

            // 提取 rating (必选)
            const ratingMatch = commentBody.match(/rating:([\d.]+)/);
            if (ratingMatch && ratingMatch[1]) {
              rating = parseFloat(ratingMatch[1]);
              // 验证 rating 范围 (可选，但推荐)
              if (isNaN(rating) || rating < 0.0 || rating > 5.0) {
                core.setFailed(`Invalid rating value: "${ratingMatch[1]}". Rating must be between 0.0 and 5.0.`);
                return;
              }
            } else {
              core.setFailed("Required 'rating' parameter missing or invalid. Usage: /approve-plugin rating:[0.0-5.0]");
              return;
            }

            // 提取 verified (可选)
            const verifiedMatch = commentBody.match(/verified:(true|false)/);
            if (verifiedMatch && verifiedMatch[1]) {
              verified = verifiedMatch[1] === 'true';
            }

            // 提取 category (可选)
            const categoryMatch = commentBody.match(/category:([\w-]+)/);
            if (categoryMatch && categoryMatch[1]) {
              category = categoryMatch[1];
            }

            core.setOutput('rating', rating);
            core.setOutput('verified', verified);
            core.setOutput('overridden_category', category); // 区分 Issue 模板的 category
        env:
          COMMENT_BODY: ${{ github.event.comment.body }}

      - name: Extract Package Name and Original Category from Issue Body
        id: extract_issue_data
        uses: actions/github-script@v6
        with:
          script: |
            const issueBody = process.env.ISSUE_BODY;
            const core = require('@actions/core');

            let packageName = null;
            let originalCategory = null;

            const lines = issueBody.split('\n');
            let captureNextLineForPackage = false;
            let captureNextLineForCategory = false;

            for (const line of lines) {
              if (line.includes('NPM Package Name')) {
                captureNextLineForPackage = true;
                captureNextLineForCategory = false;
                continue;
              }
              if (line.includes('Category')) {
                captureNextLineForCategory = true;
                captureNextLineForPackage = false;
                continue;
              }

              const trimmedLine = line.trim();
              if (trimmedLine) {
                if (captureNextLineForPackage && !packageName) {
                  packageName = trimmedLine;
                  captureNextLineForPackage = false;
                }
                if (captureNextLineForCategory && !originalCategory) {
                  originalCategory = trimmedLine;
                  captureNextLineForCategory = false;
                }
              }
            }
            
            if (!packageName) {
              core.setFailed('Could not extract NPM Package Name from issue body.');
              return;
            }
            if (!originalCategory) {
              core.setFailed('Could not extract Category from issue body.');
              return;
            }

            core.setOutput('packageName', packageName);
            core.setOutput('originalCategory', originalCategory);
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
          
      - name: Construct JSON Payload and Send POST Request
        run: |
          PACKAGE_NAME="${{ steps.extract_issue_data.outputs.packageName }}"
          RATING="${{ steps.parse_command.outputs.rating }}"
          VERIFIED="${{ steps.parse_command.outputs.verified }}"
          OVERRIDDEN_CATEGORY="${{ steps.parse_command.outputs.overridden_category }}"
          ORIGINAL_CATEGORY="${{ steps.extract_issue_data.outputs.originalCategory }}"
          
          # 根据需求，如果命令中提供了 category，则覆盖 Issue 中的 category；否则使用 Issue 中的 category
          FINAL_CATEGORY="${OVERRIDDEN_CATEGORY:-$ORIGINAL_CATEGORY}"

          # 构建 JSON payload
          # 使用 jq 工具构建 JSON，它可以安全地处理字符串和类型
          JSON_PAYLOAD=$(jq -n \
            --arg pkg "$PACKAGE_NAME" \
            --argjson rt "$RATING" \
            --argjson vf "$VERIFIED" \
            --arg cat "$FINAL_CATEGORY" \
            --arg apikey "${{ secrets.KOISHI_PLUGIN_ADD_API_KEY }}" \
            '{
              "packageName": $pkg,
              "rating": $rt,
              "verified": $vf,
              "apiKey": $apikey,
              "category": $cat
            }')

          echo "Attempting to POST to API:"
          echo "$JSON_PAYLOAD"

          curl -X POST \
               -H "Content-Type: application/json" \
               -d "$JSON_PAYLOAD" \
               http://exp.kp.itzdrli.cc/api/add-plugin
        # Note: If curl returns a non-zero exit code (e.g., HTTP 4xx/5xx status),
        # this step will fail, and the workflow will stop.